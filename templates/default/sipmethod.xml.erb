<?xml version='1.0' encoding='UTF-8'?>
<!-- Auto-generated by Chef for <%= node.name %> -->
<SIPMethod version='4.0'>
<% if node[:prism][:enable_webhosting] -%>
  <Container reloadInterval="30" applicationRoot="apps" workRoot="work" osgi="<%=@osgi_enabled%>">
    <% @web_dirs.each do |dir| -%>
    <Application docBase="<%= dir %>"/>
    <% end -%>
  </Container>
<% else -%>
  <Container osgi="<%=@osgi_enabled%>"/>
<%end -%>
  <MediaControl>
    <MS uri="mrcp://<%="#{@mrcp_ip}:#{@mrcp_port}"%>" useLoopBackAddress="<%=@use_loop_back_address%>">
      <ASR>
        <% @asr_engines.each do |engine| %>
          <Langs>
            <Attribute name="<%= engine[:lang] %>"><%= engine[:grammar_translator] %></Attribute>
          </Langs>
        <% end %>
        <Translate-Grammars>
          <% @asr_engines.each do |engine| %>
            <Attribute name="<%= engine[:lang] %>"><%= engine.has_key?(:translate_grammars) ? engine[:translate_grammars] : true %></Attribute>
          <% end %>
        </Translate-Grammars>
      </ASR>
    </MS>
  </MediaControl>
<% if node[:prism][:sipmethod][:bosh][:enabled] -%>
  <BOSH boshurl="<%=@bosh_url%>"/>
<% end -%>
<% @udp_network_access_points.each do |port| -%>
  <NetworkAccessPoint port='<%=port %>' transport='udp' <%= (Prism.nat_mapping :address=> @address, :port=>port, :relay_port=>@relay_port, :relay_address=>@relay_address) if node[:prism][:nat_mode] %>/>
<% end -%>
<% @tcp_network_access_points.each do |port| -%>
  <NetworkAccessPoint port='<%=port %>' transport='tcp' <%= (Prism.nat_mapping :address=> @address, :port=>port, :relay_port=>@relay_port, :relay_address=>@relay_address ) if node[:prism][:nat_mode] %>/>
<% end -%>
  <NetworkAccessPoint pointtype='client' port='<%=@xmpp_client_port%>' transport='xmpp'/>
  <NetworkAccessPoint pointtype='server' port='<%=@xmpp_server_port%>' transport='xmpp'/>
  <NetworkAccessPoint coreThreadPoolSize='50' port='<%=@http_port%>' transport='http'/>
  <SIP rport='true'>
    <Interceptor class='com.micromethod.sipmethod.server.sip.interceptor.GenericAuthenticator' name='DefaultSipAuthenticator' path='conf/sip.authenticators.properties'/>
    <% if @gateway_address -%>
    <Gateway address="<%=@gateway_address%>" transport="<%=@gateway_transport%>">
      <% if @registration_address -%>
      <Registration address="<%=@registration_address%>" user="<%=@registration_user%>" <%= "authuser=\"#{@registration_authuser}\"" if @registration_authuser %> password="<%=@registration_password%>" domain="<%=@registration_domain%>" contact="@registration_contact%>" expiration="<%=@registration_expiration%>"/>
      <% end -%>
    </Gateway>
    <% end -%>
  </SIP>
  <HTTP>
   <Interceptor class='com.micromethod.sipmethod.server.http.interceptor.GenericAuthenticator' name='DefaultHttpAuthenticator' path='conf/http.authenticators.properties'/>
  </HTTP>
<% if node[:prism][:sipmethod][:phono_interceptor][:enabled] -%>
  <XMPP>
    <Interceptor class="com.phono.interceptor.PhonoXmppInterceptor" name="phonointerceptor" hostname="<%=node[:phono][:external_dns] ? node[:phono][:external_dns] : node.name.dup.insert(node.name.index('.'), '-ext')%>"/>
  </XMPP>
<%else-%>
  <XMPP <%= "distributable=\"true\"" if node[:prism][:cluster] %>/>
<%end-%>
  <SOAP/>
  <Realm class='com.micromethod.sipmethod.server.security.impl.MemoryRealm' name='MemoryRealm' path='conf/sipmethod-users.xml'/>
  <DistributedDirectory/>
  <% if @snmp_enabled -%>
  <SNMPAgent authenticationPassword='' authenticationType='' communityName='<%=@community_name%>' privacyPassword='' privacyType='' userName='' version='v2c'>
   <Listener address='<%=@snmp_tcp_listen_address%>' port='<%=@snmp_tcp_port%>' transport='tcp'/>
   <Listener address='<%=@snmp_udp_listen_address%>' port='<%=@snmp_udp_port%>' transport='udp'/>
  </SNMPAgent>
  <% end -%>
<% if node[:prism][:cluster] -%>
  <Cluster>
    <Node name="<%=node[:hostname]%>" local="<%=node[:ipaddress]%>:<%= node[:prism][:rmi_port] %>">
  <% @peers.each do |peer| -%>
     <% unless @peers.select{|c| c.is_a?(Chef::Node)}.empty? -%>
      <Peer remote="<%= (peer.ec2 ? peer.ec2.local_ipv4 : peer.ipaddress) %>:<%= node[:prism][:rmi_port] %>"/>
    <% else -%>
      <Peer remote="<%= peer %>"/>
    <%end -%>
  <%end -%>
    </Node>
  </Cluster>
<%end-%>
</SIPMethod>
